// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User Table
model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  name            String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  UserCredentials UserCredentials[]
  UserProvider    UserProvider[]
  cats            Cat[]
  type            userType          @default(OWNER)
  catSitter       catSitter[]
  overallRating   Float             @default(0)

  createdReviews  review[] @relation("CreatedReviews")
  receivedReviews review[] @relation("ReceivedReviews")

  @@map("users")
}

model UserCredentials {
  userId       Int    @id @map("user_id")
  passwordHash String
  salt         String
  user         User   @relation(fields: [userId], references: [id])

  @@map("user_credentials")
}

model UserProvider {
  id             Int       @id @default(autoincrement())
  provider       String // google, facebook, etc.
  providerUserId String
  accessToken    String?
  refreshToken   String?
  expiresAt      DateTime?
  userId         Int
  user           User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerUserId])
  @@map("user_providers")
}

model Cat {
  id      Int    @id @default(autoincrement())
  name    String
  age     Int
  gender  String
  ownerId Int
  breed   String
  weight  Float
  owner   User   @relation(fields: [ownerId], references: [id])

  @@map("cats")
}

enum userType {
  OWNER
  SITTER
}

model catSitter {
  id      Int    @id @default(autoincrement())
  userId  Int    @unique
  user    User   @relation(fields: [userId], references: [id])
  jobDesc String
  price   Float

  @@map("cat_sitters")
}

model review {
  id             Int      @id @default(autoincrement())
  rate           Float
  userReviewedId Int      // user who is reviewed
  reviews        User     @relation("ReceivedReviews", fields: [userReviewedId], references: [id])
  review         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int      // reviewer
  reviewer       User     @relation("CreatedReviews", fields: [userId], references: [id])

  @@map("reviews")
}
